#!/usr/bin/python
#
# check-es Elasticsearch status checker
# Copyright (C) 2017 8c30ff1057d69a6a6f6dc2212d8ec25196c542acb8620eb4148318a4b10dd131
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import json
import sys
import socket
import ipaddress
import argparse

try:
    import httplib
except ImportError as e:
    import http.client as httplib

def init():
    """Initialization function"""

    parser = argparse.ArgumentParser(description="Usage: check-es -x <status> -w <warn> -c <crit> [options] ; -x, -w, -c are required")

    parser.add_argument('-x', type=str, required=True, help="The status to check", choices=["status", "initializing_shards", "number_of_data_nodes", "number_of_nodes", "heap_used_percent"])
    parser.add_argument('-w', type=str, required=True, help="Warning value (dependent upon status)")
    parser.add_argument('-c', type=str, required=True, help="Critical value (dependent upon status)")
    parser.add_argument('-C', type=str, required=False, help="Comparison type (ignored if -x is status)", choices=["<", "<=", ">", ">=", "!=", "=="], default="==")
    parser.add_argument('-a', type=str, required=False, help="Elasticsearch server to connect to (default localhost)", default="localhost")
    parser.add_argument('-p', type=int, required=False, help="Elasticsearch server HTTP port (default 9200)", default=9200)

    args = vars(parser.parse_args())

    status_check = args["x"]
    warn_val = args["w"]
    crit_val = args["c"]
    compare_val = args["C"]
    es_host = args["a"]
    es_port = args["p"]

    return (status_check, warn_val, crit_val, compare_val, es_host, es_port)


def init_data(host, port):
    """Polls the host for initial stats"""

    try:
        http_conn = httplib.HTTPConnection(host, port)

        http_conn.request("GET", "/_cluster/health")
        health_data = json.loads(http_conn.getresponse().read())

        http_conn.request("GET", "/_nodes/%s/stats/jvm" % "_local")
        node_data = json.loads(http_conn.getresponse().read())

        http_conn.close()

        return (health_data, node_data)
    except socket.error:
        print("CRITICAL: %s is not responding." % host)
        sys.exit(2)


def start(data, status_check, comparison_op, crit_val, warn_val):
    """Starts the check"""

    health_data = data[0]
    node_data = data[1]

    if status_check == "status":
        check_status(health_data["status"], status_check, crit_val, warn_val)
    elif status_check == "initializing_shards":
        int_checker(health_data["initializing_shards"],
                    status_check,
                    comparison_op,
                    crit_val,
                    warn_val)
    elif status_check == "number_of_data_nodes":
        int_checker(health_data["number_of_data_nodes"],
                    status_check,
                    comparison_op,
                    crit_val,
                    warn_val)
    elif status_check == "number_of_nodes":
        int_checker(health_data["number_of_nodes"],
                    status_check,
                    comparison_op,
                    crit_val,
                    warn_val)
    elif status_check == "heap_used_percent":
        # Verify data set just incase
        if len(node_data["nodes"]) > 0:
            node_id_key = node_data["nodes"].keys()[0]
            int_checker(node_data["nodes"][node_id_key]["jvm"]["mem"]["heap_used_percent"])
        else:
            print("CRITICAL: Unable to retrieve nodes list from %s. Is it down?" % "_local")
            sys.exit(2)


def check_status(value, status_check, crit_val, warn_val):
    """Basic check for status checking"""

    if value == warn_val:
        print("WARNING: %s has failed with %s." % (status_check, warn_val))
        sys.exit(1)
    elif value == crit_val:
        print("CRITICAL: %s has failed with %s." % (status_check, crit_val))
        sys.exit(2)

    print("OK: %s is ok: %s" % (status_check, value))
    sys.exit(0)


def int_checker(value, status_check, comparison_op, crit_val, warn_val):
    """Used for int based comparisons to do the check"""

    if comparison_op == "==":
        if value == int(crit_val):
            print("CRITICAL: %s is == %s" % (status_check, crit_val))
            sys.exit(1)
        elif value == int(warn_val):
            print("WARNING: %s is == %s" % (status_check, warn_val))
            sys.exit(2)

        print("OK: %s is ok: %s" % (status_check, value))
        sys.exit(0)
    elif comparison_op == "!=":
        if value != int(crit_val):
            print("CRITICAL: %s is != %s" % (status_check, crit_val))
            sys.exit(1)
        elif value != int(warn_val):
            print("WARNING: %s is != %s" % (status_check, warn_val))
            sys.exit(2)

        print("OK: %s is ok: %s" % (status_check, value))
        sys.exit(0)
    elif comparison_op == "<=":
        if value <= int(crit_val):
            print("CRITICAL: %s is <= %s" % (status_check, crit_val))
            sys.exit(1)
        elif value <= int(warn_val):
            print("WARNING: %s is <= %s" % (status_check, warn_val))
            sys.exit(2)

        print("OK: %s is ok: %s" % (status_check, value))
        sys.exit(0)
    elif comparison_op == "<":
        if value < int(crit_val):
            print("CRITICAL: %s is < %s" % (status_check, crit_val))
            sys.exit(1)
        elif value < int(warn_val):
            print("WARNING: %s is < %s" % (status_check, warn_val))
            sys.exit(2)

        print("OK: %s is ok: %s" % (status_check, value))
        sys.exit(0)
    elif comparison_op == ">":
        if value > int(crit_val):
            print("CRITICAL: %s is > %s" % (status_check, crit_val))
            sys.exit(1)
        elif value > int(warn_val):
            print("WARNING: %s is > %s" % (status_check, warn_val))
            sys.exit(2)

        print("OK: %s is ok: %s" % (status_check, value))
        sys.exit(0)
    elif comparison_op == ">=":
        if value >= int(crit_val):
            print("CRITICAL: %s is >= %s" % (status_check, crit_val))
            sys.exit(1)
        elif value >= int(warn_val):
            print("WARNING: %s is >= %s" % (status_check, warn_val))
            sys.exit(2)

        print("OK: %s is ok: %s" % (status_check, value))
        sys.exit(0)


def main():
    status_check, warn_val, crit_val, compare_val, es_host, es_port = init()

    data = init_data(es_host, es_port)

    start(data, status_check, compare_val, crit_val, warn_val)

if __name__ == "__main__":
    main()
